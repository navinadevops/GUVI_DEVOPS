sample pod:

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: demo
spec:
  containers:
  - name: nginx
    image: nginx

Get the Service Account Token:

SECRET_NAME=$(kubectl get sa demo-sa -n demo -o jsonpath="{.secrets[0].name}")
TOKEN=$(kubectl get secret $SECRET_NAME -n demo -o jsonpath="{.data.token}" | base64 --decode)

Set Up a Temporary kubeconfig:
Create a temporary kubeconfig file named kubeconfig-demo:

kubectl config set-credentials demo-sa --token=$TOKEN --kubeconfig=kubeconfig-demo
kubectl config set-context demo --cluster=$(kubectl config view --minify -o jsonpath='{.clusters[0].name}') --namespace=demo --user=demo-sa --kubeconfig=kubeconfig-demo
kubectl config use-context demo --kubeconfig=kubeconfig-demo

Test Pod Access:
List pods using the Service Account:

kubectl get pods --kubeconfig=kubeconfig-demo

Test Forbidden Actions:
Try to create a pod using the Service Account (this should fail):

kubectl run busybox --image=busybox --kubeconfig=kubeconfig-demo


-----
kubectl create secret generic demo-sa-token --from-literal=token=$(openssl rand -base64 32) -n demo

kubectl patch serviceaccount demo-sa -p '{"secrets": [{"name": "demo-sa-token"}]}' -n demo
-----------
sample dummy kubeconfig-demo:

apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt  # Example file path
    # certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCg==  # Example base64-encoded CA data
    server: https://192.168.99.100:6443  # Example API server URL
  name: my-cluster
contexts:
- context:
    cluster: my-cluster
    namespace: demo
    user: demo-sa
  name: demo
current-context: demo
users:
- name: demo-sa
  user:
    token: eyJhbGciOiJSUzI1NiIsImtpZCI6Ijc1Y2Y5YjY3Z...  # Example token
--------------------

remaining steps:

- create a eks-sa-role
- add below annotation 

apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-sa
  namespace: demo
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::<account-id>:role/EKSServiceAccountRole


- cm change

apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: arn:aws:iam::<account-id>:role/EKSServiceAccountRole
      username: demo-sa
      groups:
        - system:masters

kubectl get configmap aws-auth -n kube-system -o yaml
kubectl get pods --kubeconfig=/path/to/kubeconfig-demo
